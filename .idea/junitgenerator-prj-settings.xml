<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="JUnitGeneratorProjectSettings">
    <option name="outputFilePattern" value="${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}" />
    <option name="selectedTemplateKey" value="JUnit 4" />
    <option name="vmTemplates">
      <map>
        <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package test.$entry.packageName; &#10;&#10;import junit.framework.Test; &#10;import junit.framework.TestSuite; &#10;import junit.framework.TestCase; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass extends TestCase { &#10;public $testClass(String name) { &#10;super(name); &#10;} &#10;&#10;public void setUp() throws Exception { &#10;super.setUp(); &#10;} &#10;&#10;public void tearDown() throws Exception { &#10;super.tearDown(); &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;&#10;public static Test suite() { &#10;return new TestSuite(${testClass}.class); &#10;} &#10;} &#10;#end" />
        <entry key="JUnit 4" value="############################################################################################Available variables:##$entryList.methodList-List of method composites##$entryList.privateMethodList-List of private method composites##$entryList.fieldList-ArrayList of&#10;&#10;&#10;class scope&#10;field names##$entryList.className-&#10;&#10;class name##$entryList.packageName-package name##$today-&#10;Todays date&#10;&#10;in MM/dd/&#10;&#10;yyyy format####&#10;&#10;MethodComposite variables:##$method.name-&#10;&#10;Method Name##$method.signature-&#10;&#10;Full method&#10;&#10;signature in&#10;&#10;String form##$method.reflectionCode-&#10;&#10;list of&#10;&#10;strings representing&#10;&#10;commented out&#10;&#10;reflection code&#10;&#10;to access&#10;&#10;method (Private Methods)&#10;        ##                $method.paramNames - List of Strings representing the method's parameters' names&#10;        ##                $method.paramClasses - List of Strings representing the method's parameters' classes&#10;        ##&#10;        ## You can configure the output class name using &quot;testClass&quot; variable below.&#10;        ## Here are some examples:&#10;        ## Test${entry.ClassName} - will produce TestSomeClass&#10;        ## ${entry.className}Test - will produce SomeClassTest&#10;        ##&#10;        ########################################################################################&#10;        ##&#10;        #macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end&#10;        ## Iterate through the list and generate testcase for every entry.&#10;        #foreach ($entry in $entryList)&#10;        #set( $testClass=&quot;${entry.className}Test&quot;)&#10;        ##&#10;        package $entry.packageName;&#10;&#10;&#10;import org.junit.Test;import org.junit.Before;&#10;import org.junit.After;&#10;&#10;&#10;/**&#10; * ${entry.className} Tester.&#10; *&#10; * @author XiangDe Liu qq313700046@icloud.com&#10; * @since&#10; * &#10; *        &lt;pre&gt;&#10; *        $date&#10; *        &lt;/pre&gt;&#10; * &#10; * @version 1.0&#10; */&#10;public class $testClass&#10;{&#10;&#10;    @Before&#10;    public void before() throws Exception&#10;    {&#10;&#10;    }&#10;&#10;    @After&#10;    public void after() throws Exception {&#10;    }&#10;&#10;    #&#10;&#10; foreach($method in $entry.methodList)&#10;&#10;/**&#10; *&#10; * Method: $method.signature &#10; *&#10; */&#10;    @Test&#10;    public void test#&#10;&#10;    cap(${method.name})()throws Exception&#10;&#10;    {&#10;//TODO: Test goes here... &#10;    }&#10;&#10;    #end&#10;&#10;    #&#10;&#10; foreach($method in $entry.privateMethodList)&#10;&#10;/**&#10; *&#10; * Method: $method.signature &#10; *&#10; */&#10;    @Test&#10;    public void test#&#10;&#10;    cap(${method.name})()throws Exception&#10;&#10;    {&#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode)&#10;        $string &#10;#end&#10;    }&#10;&#10;    #end&#10;}#end" />
      </map>
    </option>
  </component>
</project>